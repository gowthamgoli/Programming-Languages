Terminology
----------------
Sytax		 The syntax of a computer language is the set of rules that defines the combinations of symbols that are considered to be a correctly structured document or fragment in 					 that language

Semantics	 Semantics is concerned with the interpretation or understanding of programs and how to predict the outcome of program execution. The semantics of a programming language 				     describe the relation between the syntax and the model of computation. Semantics can be thought of as a function which maps syntactical constructs to the computational model

Compiler	 A compiler is a computer program (or a set of programs) that transforms source code written in a programming language (the source language) into another computer language (the 			  target language), with the latter often having a binary form known as object code

Interpreter  An interpreter is a computer program that directly executes, i.e. performs, instructions written in a programming or scripting language, without previously compiling them into 			  a machine language program.

Static semantics    The static semantics defines restrictions on the structure of valid texts that are hard or impossible to express in standard syntactic formalisms. For compiled 							languages, static semantics essentially include those semantic rules that can be checked at compile time
Dynamic Semantics 	The dynamic semantics (also known as execution semantics) of a language defines how and when the various constructs of a language should produce a program behavior

Linker		 A linker or link editor is a computer program that takes one or more object files generated by a compiler and combines them into a single executable file, library file, or 				 another object file

Parser		A parser is a program, usually part of a compiler, that receives input in the form of sequential source program instructions and breaks them up into parts (for example, the 				nouns (objects), verbs (methods), and their attributes or options) that can then be managed by other programming (for example, other components in a compiler). A parser may 				also check to see that all input has been provided that is necessary

Code Generation		Code generation is the process by which a compiler's code generator converts some intermediate representation of source code into a form (e.g., machine code) that can 						be readily executed by a machine

Static Typing		A programming language is said to use static typing when type checking is performed during compile-time as opposed to run-time. In static typing, types are associated 						with variables not values. Ex - Ada, C, C++, C#, JADE, Java, Fortran, Haskell, ML, Pascal, Perl and Scala

Dynamic typing 		A programming language is said to be dynamically typed, or just 'dynamic', when the majority of its type checking is performed at run-time as opposed to at compile-time.
					In dynamic typing, types are associated with values not variables. Dynamically typed languages include Groovy, JavaScript, Lisp, Lua, Objective-C, Perl, PHP, Prolog, Python, Ruby, Smalltalk

Static Scoping		In Static scoping, the structure of the program source code determines what variables you are referring to. Therefore the scope of the bindings can be determined at the 					 compile time

Dynamic scoping   	In Dynamic scoping, the runtime state of the program stack determines what variable you are referring to. Therefore the scope of the bindings can be determined at the 						run time

Abstraction			Abstraction is the act of representing essential features without including the background details or explanations

Low Level Lang 		Low-level programming language is a programming language that provides little or no abstraction from a computer's instruction set architecture. 

High Level Lang 	By comparison, a high-level programming language isolates the execution semantics of a computer architecture from the specification of the program, making the process 						of developing a program simpler and more understandable

Imperative Langs 	An imperative language uses a sequence of statements to determine how to reach a certain goal. These statements are said to change the state of the program as each one 					is executed in turn.

Functional Langs 	The functional programming paradigm was explicitly created to support a pure functional approach to problem solving. Functional programming is a 											form of declarative programming

In imperative languages you tell the computer how to change bits, bytes and words in it's memory and in what order. In functional ones, we tell the computer what things, actions etc. are. For example, we say that the factorial of 0 is 1, and the factorial of every other natural number is the product of that number and the factorial of its predecessor. We don't say: To compute the factorial of n, reserve a memory region and store 1 there, then multiply the number in that memory region with the numbers 2 to n and store the result at the same place, and at the end, the memory region will contain the factorial.