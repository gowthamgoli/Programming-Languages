with Text_Io;
use Text_Io;

package body Sort is	
	
	package Int_Io is new Integer_Io(Integer);
    use Int_Io;

	procedure MergeSort(A: in out listofNumbers; B: in out listofNumbers; First : Integer; Last : Integer) is

		task type Sort_task(startIndex: Integer; endIndex : Integer; Taskno : Integer) is
		end Sort_task;

		--type Sort_half is access Sort_Task;

		task body Sort_Task is 
    	begin 
    		--Put_Line("Inside Task body");
    		Put_Line("Task" & Taskno'img & " calls MergeSort("&startIndex'img& ", " &endIndex'img & ")");
        	MergeSort(A, B, startIndex, endIndex); 
    	end Sort_Task; 

    	mid : Integer;
    	i : Integer;
	j : Integer;
	p : Integer;

    begin

    	

    	if First < Last then

    		mid := (First+Last)/2;

	    	declare

		    	Task_MergeFirstHalf : Sort_task(First, mid, 1);
			Task_MergeSecondHalf : Sort_task(mid+1, Last, 2);

			begin

				null;

			end;

				Put_Line("First = " & First'img & " Last = " & Last'img & " mid = " & mid'img);
				
				i := First;
				j := mid+1;
				p := First;

				while i<= mid and j <= Last loop

					if A(i) < A(j) then

						B(p) := A(i);
						--Put_Line("B(" & p'img & ") = " & B(p)'img);
						i := i+1;
						p := p+1;

					else

						B(p) := A(j);
						--Put_Line("B(" & p'img & ") = " & B(p)'img);
						j := j+1;
						p := p+1;

					end if;



				end loop;

				while i <= mid loop

					B(p) := A(i);
					--Put_Line("B(" & p'img & ") = " & B(p)'img);
					i := i+1;
					p := p+1;

				end loop;

				while j <= Last loop

					B(p) := A(j);
					--Put_Line("B(" & p'img & ") = " & B(p)'img);
					j := j+1;
					p := p+1;

				end loop;

				for i in First .. Last loop

					A(i) := B(i);
					--Put_Line("A(" & i'img & ") = " & A(i)'img);

				end loop;


		end if;

	end MergeSort;

end Sort;
